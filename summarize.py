#Import the summarize_video function from the break_video module
from break_video import summarize_video

#Import the os module for interacting with the operating system
import os

'''

This program takes user input for a video file and the number of frames to process from that video,
And then returns an ai generated summary of the video with help from the user adding additional context.

This program was not produced to be used on is own, but to use the visual context along with a transcript generated by whisper to summarize
a video using an llm. It should be easy to integrate this program into a program to also get the whisper transcription, and then summarize both.

'''

#Define the file containing summarize instructions
#This file is given to the model as instructions to summarize all the frames.
sum_instruct_file = "summarize.md"

#Define the main function to execute video summarization
def main():
# Prompt the user to enter the video path to summarize
# The user can also choose to quit by entering 'q'
    vidpath = input("Input video path to summarize (q to quit): ")


    # Check if the user wants to quit
    if vidpath.lower() == "q":
        print('Goodbye')
        return True

    # Remove any quotes from the video path
    vidpath = vidpath.strip('"')

    # Check if the video file exists at the specified path
    # The os.path.normpath function is used to normalize the path
    if not os.path.exists(vidpath := os.path.normpath(vidpath)):
        # Print an error message if the file does not exist
        print(f"Error: Video file {vidpath} does not exist.")
        # Return from the function to prevent further execution
        return

    # Prompt the user to select the number of frames to use for summarization
    # The user is informed that each frame takes approximately 5-10 seconds to process
    numframes = int(input("Select number of frames(1 frame = ~ 5-10 seconds processing time.):"))

    # Prompt the user to add a description of the events in the footage
    more_context = input("Add a description of the events of the footage: ")

    # Call the summarize_video function with the provided parameters
    # The function returns a summary of the video, which is then printed to the console
    print(summarize_video(vidpath, numframes, sum_instruct_file, more_context))

if __name__ == "__main__":
    # Enter a loop to continuously run the main function
    while True:
        # Run the main function and check its return value
        # If the function returns True, it means the user wants to quit
        if main():
            # Break out of the loop to exit the program
            break